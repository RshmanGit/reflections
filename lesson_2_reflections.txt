-What happens when you initialize a repository? Why do you need to do it?

it creates an empty .git directory inside the current directory and meta data the tracks the workspace. To start the project and save the meta-data which will be used to control the work-flow using git.

-How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is like temporary box which contains all the files from the working directory, that will be added to the repository after the commit.

-How can you use the staging area to make sure you have one commit per logical change?

One can keep adding the files that have been changed in the staging are and keep tracking the changes that have been made. After the change has been completely made and the desired output has been created, the entire staging are can be commited.

-What are some situations when branches would be helpful in keeping your history organized? How would branches help?

one, when i want to implement a feature which i think is too risky to be implemented directly in the main branch or one that is not really necessary in the main branch. Two, if there are multiple people working on the same project, the can divide their work in multiple branches, so that they do not interfere with each other's work.

-How do the diagrams help you visualize the branch structure?

the diagrams represents the time line in a form of a tree, which make it easier to follow along.

-What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

the result of the merge is a common branch that has all the commits from both the branched sorted using timestamps.
this can be represented on the diagram by connecting the side branch to latest commit in the master branch.


